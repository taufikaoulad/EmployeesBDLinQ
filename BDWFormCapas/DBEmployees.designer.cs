#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmployeesBDLinQ
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TaufikEmpleado")]
	public partial class DBEmployeesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void Insertcountries(countries instance);
    partial void Updatecountries(countries instance);
    partial void Deletecountries(countries instance);
    partial void Insertdepartments(departments instance);
    partial void Updatedepartments(departments instance);
    partial void Deletedepartments(departments instance);
    partial void Insertdependents(dependents instance);
    partial void Updatedependents(dependents instance);
    partial void Deletedependents(dependents instance);
    partial void Insertemployees(employees instance);
    partial void Updateemployees(employees instance);
    partial void Deleteemployees(employees instance);
    partial void Insertjobs(jobs instance);
    partial void Updatejobs(jobs instance);
    partial void Deletejobs(jobs instance);
    partial void Insertlocations(locations instance);
    partial void Updatelocations(locations instance);
    partial void Deletelocations(locations instance);
    partial void Insertregions(regions instance);
    partial void Updateregions(regions instance);
    partial void Deleteregions(regions instance);
    #endregion
		
		public DBEmployeesDataContext() : 
				base(global::BDWFormCapas.Properties.Settings.Default.TaufikEmpleadoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBEmployeesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBEmployeesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBEmployeesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBEmployeesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<countries> countries
		{
			get
			{
				return this.GetTable<countries>();
			}
		}
		
		public System.Data.Linq.Table<departments> departments
		{
			get
			{
				return this.GetTable<departments>();
			}
		}
		
		public System.Data.Linq.Table<dependents> dependents
		{
			get
			{
				return this.GetTable<dependents>();
			}
		}
		
		public System.Data.Linq.Table<employees> employees
		{
			get
			{
				return this.GetTable<employees>();
			}
		}
		
		public System.Data.Linq.Table<jobs> jobs
		{
			get
			{
				return this.GetTable<jobs>();
			}
		}
		
		public System.Data.Linq.Table<locations> locations
		{
			get
			{
				return this.GetTable<locations>();
			}
		}
		
		public System.Data.Linq.Table<regions> regions
		{
			get
			{
				return this.GetTable<regions>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.countries")]
	public partial class countries : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _country_id;
		
		private string _country_name;
		
		private int _region_id;
		
		private EntitySet<locations> _locations;
		
		private EntityRef<regions> _regions;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncountry_idChanging(string value);
    partial void Oncountry_idChanged();
    partial void Oncountry_nameChanging(string value);
    partial void Oncountry_nameChanged();
    partial void Onregion_idChanging(int value);
    partial void Onregion_idChanged();
    #endregion
		
		public countries()
		{
			this._locations = new EntitySet<locations>(new Action<locations>(this.attach_locations), new Action<locations>(this.detach_locations));
			this._regions = default(EntityRef<regions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country_id", DbType="Char(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string country_id
		{
			get
			{
				return this._country_id;
			}
			set
			{
				if ((this._country_id != value))
				{
					this.Oncountry_idChanging(value);
					this.SendPropertyChanging();
					this._country_id = value;
					this.SendPropertyChanged("country_id");
					this.Oncountry_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country_name", DbType="VarChar(40)")]
		public string country_name
		{
			get
			{
				return this._country_name;
			}
			set
			{
				if ((this._country_name != value))
				{
					this.Oncountry_nameChanging(value);
					this.SendPropertyChanging();
					this._country_name = value;
					this.SendPropertyChanged("country_name");
					this.Oncountry_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_region_id", DbType="Int NOT NULL")]
		public int region_id
		{
			get
			{
				return this._region_id;
			}
			set
			{
				if ((this._region_id != value))
				{
					if (this._regions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onregion_idChanging(value);
					this.SendPropertyChanging();
					this._region_id = value;
					this.SendPropertyChanged("region_id");
					this.Onregion_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="countries_locations", Storage="_locations", ThisKey="country_id", OtherKey="country_id")]
		public EntitySet<locations> locations
		{
			get
			{
				return this._locations;
			}
			set
			{
				this._locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="regions_countries", Storage="_regions", ThisKey="region_id", OtherKey="region_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public regions regions
		{
			get
			{
				return this._regions.Entity;
			}
			set
			{
				regions previousValue = this._regions.Entity;
				if (((previousValue != value) 
							|| (this._regions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._regions.Entity = null;
						previousValue.countries.Remove(this);
					}
					this._regions.Entity = value;
					if ((value != null))
					{
						value.countries.Add(this);
						this._region_id = value.region_id;
					}
					else
					{
						this._region_id = default(int);
					}
					this.SendPropertyChanged("regions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_locations(locations entity)
		{
			this.SendPropertyChanging();
			entity.countries = this;
		}
		
		private void detach_locations(locations entity)
		{
			this.SendPropertyChanging();
			entity.countries = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.departments")]
	public partial class departments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _department_id;
		
		private string _department_name;
		
		private System.Nullable<int> _location_id;
		
		private EntitySet<employees> _employees;
		
		private EntityRef<locations> _locations;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondepartment_idChanging(int value);
    partial void Ondepartment_idChanged();
    partial void Ondepartment_nameChanging(string value);
    partial void Ondepartment_nameChanged();
    partial void Onlocation_idChanging(System.Nullable<int> value);
    partial void Onlocation_idChanged();
    #endregion
		
		public departments()
		{
			this._employees = new EntitySet<employees>(new Action<employees>(this.attach_employees), new Action<employees>(this.detach_employees));
			this._locations = default(EntityRef<locations>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_department_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int department_id
		{
			get
			{
				return this._department_id;
			}
			set
			{
				if ((this._department_id != value))
				{
					this.Ondepartment_idChanging(value);
					this.SendPropertyChanging();
					this._department_id = value;
					this.SendPropertyChanged("department_id");
					this.Ondepartment_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_department_name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string department_name
		{
			get
			{
				return this._department_name;
			}
			set
			{
				if ((this._department_name != value))
				{
					this.Ondepartment_nameChanging(value);
					this.SendPropertyChanging();
					this._department_name = value;
					this.SendPropertyChanged("department_name");
					this.Ondepartment_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location_id", DbType="Int")]
		public System.Nullable<int> location_id
		{
			get
			{
				return this._location_id;
			}
			set
			{
				if ((this._location_id != value))
				{
					if (this._locations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlocation_idChanging(value);
					this.SendPropertyChanging();
					this._location_id = value;
					this.SendPropertyChanged("location_id");
					this.Onlocation_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="departments_employees", Storage="_employees", ThisKey="department_id", OtherKey="department_id")]
		public EntitySet<employees> employees
		{
			get
			{
				return this._employees;
			}
			set
			{
				this._employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="locations_departments", Storage="_locations", ThisKey="location_id", OtherKey="location_id", IsForeignKey=true, DeleteRule="CASCADE")]
		public locations locations
		{
			get
			{
				return this._locations.Entity;
			}
			set
			{
				locations previousValue = this._locations.Entity;
				if (((previousValue != value) 
							|| (this._locations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._locations.Entity = null;
						previousValue.departments.Remove(this);
					}
					this._locations.Entity = value;
					if ((value != null))
					{
						value.departments.Add(this);
						this._location_id = value.location_id;
					}
					else
					{
						this._location_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("locations");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_employees(employees entity)
		{
			this.SendPropertyChanging();
			entity.departments = this;
		}
		
		private void detach_employees(employees entity)
		{
			this.SendPropertyChanging();
			entity.departments = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dependents")]
	public partial class dependents : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _dependent_id;
		
		private string _first_name;
		
		private string _last_name;
		
		private string _relationship;
		
		private int _employee_id;
		
		private EntityRef<employees> _employees;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondependent_idChanging(int value);
    partial void Ondependent_idChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void OnrelationshipChanging(string value);
    partial void OnrelationshipChanged();
    partial void Onemployee_idChanging(int value);
    partial void Onemployee_idChanged();
    #endregion
		
		public dependents()
		{
			this._employees = default(EntityRef<employees>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dependent_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int dependent_id
		{
			get
			{
				return this._dependent_id;
			}
			set
			{
				if ((this._dependent_id != value))
				{
					this.Ondependent_idChanging(value);
					this.SendPropertyChanging();
					this._dependent_id = value;
					this.SendPropertyChanged("dependent_id");
					this.Ondependent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_relationship", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string relationship
		{
			get
			{
				return this._relationship;
			}
			set
			{
				if ((this._relationship != value))
				{
					this.OnrelationshipChanging(value);
					this.SendPropertyChanging();
					this._relationship = value;
					this.SendPropertyChanged("relationship");
					this.OnrelationshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employee_id", DbType="Int NOT NULL")]
		public int employee_id
		{
			get
			{
				return this._employee_id;
			}
			set
			{
				if ((this._employee_id != value))
				{
					if (this._employees.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onemployee_idChanging(value);
					this.SendPropertyChanging();
					this._employee_id = value;
					this.SendPropertyChanged("employee_id");
					this.Onemployee_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employees_dependents", Storage="_employees", ThisKey="employee_id", OtherKey="employee_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public employees employees
		{
			get
			{
				return this._employees.Entity;
			}
			set
			{
				employees previousValue = this._employees.Entity;
				if (((previousValue != value) 
							|| (this._employees.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employees.Entity = null;
						previousValue.dependents.Remove(this);
					}
					this._employees.Entity = value;
					if ((value != null))
					{
						value.dependents.Add(this);
						this._employee_id = value.employee_id;
					}
					else
					{
						this._employee_id = default(int);
					}
					this.SendPropertyChanged("employees");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.employees")]
	public partial class employees : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _employee_id;
		
		private string _first_name;
		
		private string _last_name;
		
		private string _email;
		
		private string _phone_number;
		
		private System.DateTime _hire_date;
		
		private int _fkjob_id;
		
		private decimal _salary;
		
		private System.Nullable<int> _manager_id;
		
		private System.Nullable<int> _department_id;
		
		private EntitySet<dependents> _dependents;
		
		private EntitySet<employees> _employees2;
		
		private EntityRef<departments> _departments;
		
		private EntityRef<employees> _employees1;
		
		private EntityRef<jobs> _jobs;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onemployee_idChanging(int value);
    partial void Onemployee_idChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Onphone_numberChanging(string value);
    partial void Onphone_numberChanged();
    partial void Onhire_dateChanging(System.DateTime value);
    partial void Onhire_dateChanged();
    partial void Onfkjob_idChanging(int value);
    partial void Onfkjob_idChanged();
    partial void OnsalaryChanging(decimal value);
    partial void OnsalaryChanged();
    partial void Onmanager_idChanging(System.Nullable<int> value);
    partial void Onmanager_idChanged();
    partial void Ondepartment_idChanging(System.Nullable<int> value);
    partial void Ondepartment_idChanged();
    #endregion
		
		public employees()
		{
			this._dependents = new EntitySet<dependents>(new Action<dependents>(this.attach_dependents), new Action<dependents>(this.detach_dependents));
			this._employees2 = new EntitySet<employees>(new Action<employees>(this.attach_employees2), new Action<employees>(this.detach_employees2));
			this._departments = default(EntityRef<departments>);
			this._employees1 = default(EntityRef<employees>);
			this._jobs = default(EntityRef<jobs>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employee_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int employee_id
		{
			get
			{
				return this._employee_id;
			}
			set
			{
				if ((this._employee_id != value))
				{
					this.Onemployee_idChanging(value);
					this.SendPropertyChanging();
					this._employee_id = value;
					this.SendPropertyChanged("employee_id");
					this.Onemployee_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="VarChar(20)")]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone_number", DbType="VarChar(20)")]
		public string phone_number
		{
			get
			{
				return this._phone_number;
			}
			set
			{
				if ((this._phone_number != value))
				{
					this.Onphone_numberChanging(value);
					this.SendPropertyChanging();
					this._phone_number = value;
					this.SendPropertyChanged("phone_number");
					this.Onphone_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hire_date", DbType="Date NOT NULL")]
		public System.DateTime hire_date
		{
			get
			{
				return this._hire_date;
			}
			set
			{
				if ((this._hire_date != value))
				{
					this.Onhire_dateChanging(value);
					this.SendPropertyChanging();
					this._hire_date = value;
					this.SendPropertyChanged("hire_date");
					this.Onhire_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fkjob_id", DbType="Int NOT NULL")]
		public int fkjob_id
		{
			get
			{
				return this._fkjob_id;
			}
			set
			{
				if ((this._fkjob_id != value))
				{
					if (this._jobs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfkjob_idChanging(value);
					this.SendPropertyChanging();
					this._fkjob_id = value;
					this.SendPropertyChanged("fkjob_id");
					this.Onfkjob_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Decimal(8,2) NOT NULL")]
		public decimal salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manager_id", DbType="Int")]
		public System.Nullable<int> manager_id
		{
			get
			{
				return this._manager_id;
			}
			set
			{
				if ((this._manager_id != value))
				{
					if (this._employees1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmanager_idChanging(value);
					this.SendPropertyChanging();
					this._manager_id = value;
					this.SendPropertyChanged("manager_id");
					this.Onmanager_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_department_id", DbType="Int")]
		public System.Nullable<int> department_id
		{
			get
			{
				return this._department_id;
			}
			set
			{
				if ((this._department_id != value))
				{
					if (this._departments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondepartment_idChanging(value);
					this.SendPropertyChanging();
					this._department_id = value;
					this.SendPropertyChanged("department_id");
					this.Ondepartment_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employees_dependents", Storage="_dependents", ThisKey="employee_id", OtherKey="employee_id")]
		public EntitySet<dependents> dependents
		{
			get
			{
				return this._dependents;
			}
			set
			{
				this._dependents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employees_employees", Storage="_employees2", ThisKey="employee_id", OtherKey="manager_id")]
		public EntitySet<employees> employees2
		{
			get
			{
				return this._employees2;
			}
			set
			{
				this._employees2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="departments_employees", Storage="_departments", ThisKey="department_id", OtherKey="department_id", IsForeignKey=true, DeleteRule="CASCADE")]
		public departments departments
		{
			get
			{
				return this._departments.Entity;
			}
			set
			{
				departments previousValue = this._departments.Entity;
				if (((previousValue != value) 
							|| (this._departments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._departments.Entity = null;
						previousValue.employees.Remove(this);
					}
					this._departments.Entity = value;
					if ((value != null))
					{
						value.employees.Add(this);
						this._department_id = value.department_id;
					}
					else
					{
						this._department_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("departments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employees_employees", Storage="_employees1", ThisKey="manager_id", OtherKey="employee_id", IsForeignKey=true)]
		public employees employees1
		{
			get
			{
				return this._employees1.Entity;
			}
			set
			{
				employees previousValue = this._employees1.Entity;
				if (((previousValue != value) 
							|| (this._employees1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employees1.Entity = null;
						previousValue.employees2.Remove(this);
					}
					this._employees1.Entity = value;
					if ((value != null))
					{
						value.employees2.Add(this);
						this._manager_id = value.employee_id;
					}
					else
					{
						this._manager_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("employees1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="jobs_employees", Storage="_jobs", ThisKey="fkjob_id", OtherKey="job_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public jobs jobs
		{
			get
			{
				return this._jobs.Entity;
			}
			set
			{
				jobs previousValue = this._jobs.Entity;
				if (((previousValue != value) 
							|| (this._jobs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._jobs.Entity = null;
						previousValue.employees.Remove(this);
					}
					this._jobs.Entity = value;
					if ((value != null))
					{
						value.employees.Add(this);
						this._fkjob_id = value.job_id;
					}
					else
					{
						this._fkjob_id = default(int);
					}
					this.SendPropertyChanged("jobs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dependents(dependents entity)
		{
			this.SendPropertyChanging();
			entity.employees = this;
		}
		
		private void detach_dependents(dependents entity)
		{
			this.SendPropertyChanging();
			entity.employees = null;
		}
		
		private void attach_employees2(employees entity)
		{
			this.SendPropertyChanging();
			entity.employees1 = this;
		}
		
		private void detach_employees2(employees entity)
		{
			this.SendPropertyChanging();
			entity.employees1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.jobs")]
	public partial class jobs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _job_id;
		
		private string _job_title;
		
		private System.Nullable<decimal> _min_salary;
		
		private System.Nullable<decimal> _max_salary;
		
		private EntitySet<employees> _employees;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onjob_idChanging(int value);
    partial void Onjob_idChanged();
    partial void Onjob_titleChanging(string value);
    partial void Onjob_titleChanged();
    partial void Onmin_salaryChanging(System.Nullable<decimal> value);
    partial void Onmin_salaryChanged();
    partial void Onmax_salaryChanging(System.Nullable<decimal> value);
    partial void Onmax_salaryChanged();
    #endregion
		
		public jobs()
		{
			this._employees = new EntitySet<employees>(new Action<employees>(this.attach_employees), new Action<employees>(this.detach_employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_job_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int job_id
		{
			get
			{
				return this._job_id;
			}
			set
			{
				if ((this._job_id != value))
				{
					this.Onjob_idChanging(value);
					this.SendPropertyChanging();
					this._job_id = value;
					this.SendPropertyChanged("job_id");
					this.Onjob_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_job_title", DbType="VarChar(35) NOT NULL", CanBeNull=false)]
		public string job_title
		{
			get
			{
				return this._job_title;
			}
			set
			{
				if ((this._job_title != value))
				{
					this.Onjob_titleChanging(value);
					this.SendPropertyChanging();
					this._job_title = value;
					this.SendPropertyChanged("job_title");
					this.Onjob_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_min_salary", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> min_salary
		{
			get
			{
				return this._min_salary;
			}
			set
			{
				if ((this._min_salary != value))
				{
					this.Onmin_salaryChanging(value);
					this.SendPropertyChanging();
					this._min_salary = value;
					this.SendPropertyChanged("min_salary");
					this.Onmin_salaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_max_salary", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> max_salary
		{
			get
			{
				return this._max_salary;
			}
			set
			{
				if ((this._max_salary != value))
				{
					this.Onmax_salaryChanging(value);
					this.SendPropertyChanging();
					this._max_salary = value;
					this.SendPropertyChanged("max_salary");
					this.Onmax_salaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="jobs_employees", Storage="_employees", ThisKey="job_id", OtherKey="fkjob_id")]
		public EntitySet<employees> employees
		{
			get
			{
				return this._employees;
			}
			set
			{
				this._employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_employees(employees entity)
		{
			this.SendPropertyChanging();
			entity.jobs = this;
		}
		
		private void detach_employees(employees entity)
		{
			this.SendPropertyChanging();
			entity.jobs = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.locations")]
	public partial class locations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _location_id;
		
		private string _street_address;
		
		private string _postal_code;
		
		private string _city;
		
		private string _state_province;
		
		private string _country_id;
		
		private EntitySet<departments> _departments;
		
		private EntityRef<countries> _countries;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onlocation_idChanging(int value);
    partial void Onlocation_idChanged();
    partial void Onstreet_addressChanging(string value);
    partial void Onstreet_addressChanged();
    partial void Onpostal_codeChanging(string value);
    partial void Onpostal_codeChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void Onstate_provinceChanging(string value);
    partial void Onstate_provinceChanged();
    partial void Oncountry_idChanging(string value);
    partial void Oncountry_idChanged();
    #endregion
		
		public locations()
		{
			this._departments = new EntitySet<departments>(new Action<departments>(this.attach_departments), new Action<departments>(this.detach_departments));
			this._countries = default(EntityRef<countries>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int location_id
		{
			get
			{
				return this._location_id;
			}
			set
			{
				if ((this._location_id != value))
				{
					this.Onlocation_idChanging(value);
					this.SendPropertyChanging();
					this._location_id = value;
					this.SendPropertyChanged("location_id");
					this.Onlocation_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_street_address", DbType="VarChar(40)")]
		public string street_address
		{
			get
			{
				return this._street_address;
			}
			set
			{
				if ((this._street_address != value))
				{
					this.Onstreet_addressChanging(value);
					this.SendPropertyChanging();
					this._street_address = value;
					this.SendPropertyChanged("street_address");
					this.Onstreet_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postal_code", DbType="VarChar(12)")]
		public string postal_code
		{
			get
			{
				return this._postal_code;
			}
			set
			{
				if ((this._postal_code != value))
				{
					this.Onpostal_codeChanging(value);
					this.SendPropertyChanging();
					this._postal_code = value;
					this.SendPropertyChanged("postal_code");
					this.Onpostal_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state_province", DbType="VarChar(25)")]
		public string state_province
		{
			get
			{
				return this._state_province;
			}
			set
			{
				if ((this._state_province != value))
				{
					this.Onstate_provinceChanging(value);
					this.SendPropertyChanging();
					this._state_province = value;
					this.SendPropertyChanged("state_province");
					this.Onstate_provinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country_id", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string country_id
		{
			get
			{
				return this._country_id;
			}
			set
			{
				if ((this._country_id != value))
				{
					if (this._countries.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncountry_idChanging(value);
					this.SendPropertyChanging();
					this._country_id = value;
					this.SendPropertyChanged("country_id");
					this.Oncountry_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="locations_departments", Storage="_departments", ThisKey="location_id", OtherKey="location_id")]
		public EntitySet<departments> departments
		{
			get
			{
				return this._departments;
			}
			set
			{
				this._departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="countries_locations", Storage="_countries", ThisKey="country_id", OtherKey="country_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public countries countries
		{
			get
			{
				return this._countries.Entity;
			}
			set
			{
				countries previousValue = this._countries.Entity;
				if (((previousValue != value) 
							|| (this._countries.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._countries.Entity = null;
						previousValue.locations.Remove(this);
					}
					this._countries.Entity = value;
					if ((value != null))
					{
						value.locations.Add(this);
						this._country_id = value.country_id;
					}
					else
					{
						this._country_id = default(string);
					}
					this.SendPropertyChanged("countries");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_departments(departments entity)
		{
			this.SendPropertyChanging();
			entity.locations = this;
		}
		
		private void detach_departments(departments entity)
		{
			this.SendPropertyChanging();
			entity.locations = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.regions")]
	public partial class regions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _region_id;
		
		private string _region_name;
		
		private EntitySet<countries> _countries;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onregion_idChanging(int value);
    partial void Onregion_idChanged();
    partial void Onregion_nameChanging(string value);
    partial void Onregion_nameChanged();
    #endregion
		
		public regions()
		{
			this._countries = new EntitySet<countries>(new Action<countries>(this.attach_countries), new Action<countries>(this.detach_countries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_region_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int region_id
		{
			get
			{
				return this._region_id;
			}
			set
			{
				if ((this._region_id != value))
				{
					this.Onregion_idChanging(value);
					this.SendPropertyChanging();
					this._region_id = value;
					this.SendPropertyChanged("region_id");
					this.Onregion_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_region_name", DbType="VarChar(25)")]
		public string region_name
		{
			get
			{
				return this._region_name;
			}
			set
			{
				if ((this._region_name != value))
				{
					this.Onregion_nameChanging(value);
					this.SendPropertyChanging();
					this._region_name = value;
					this.SendPropertyChanged("region_name");
					this.Onregion_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="regions_countries", Storage="_countries", ThisKey="region_id", OtherKey="region_id")]
		public EntitySet<countries> countries
		{
			get
			{
				return this._countries;
			}
			set
			{
				this._countries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_countries(countries entity)
		{
			this.SendPropertyChanging();
			entity.regions = this;
		}
		
		private void detach_countries(countries entity)
		{
			this.SendPropertyChanging();
			entity.regions = null;
		}
	}
}
#pragma warning restore 1591
